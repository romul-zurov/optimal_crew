прям щас:



убрать пробелы в статусах 													ok!
графы "опоздание" и "состояние" сделать шире      							ok!
графу "до окончания" заменить на "статус"!!!  								ok!



первичная сетка при подборе должна иметь сортировку по crew.dist			ok!
при подборе экипажа не учитывать экипаж УЖЕ назначенный на ЭТОТ заказ :)	ok!

первичную сортировку экипажей для побора проводить:     					ok!
	- если "свободен" то по расстоянию от тек. коорд. до АП;
    -  -- "занят" - от точки высадки до АП!

добавить тёмно-серый цвет в грид заказов									ok!
расширить кнопки и тедит в форм_ордер                                       ok!
при подборе экипажа для экипажа "на заказе" длинц пути учитывать только от
	точки высадки до АП, не прибавляя текущий путь!
"убрать" (спрятать) номер экипажа в подборе _ на заказ                		ok!
bold font  в сетке подбираемых экипажей                                     ok!
во ВСЕХ методах TOrder добавить проверку на destroy_flag !!!				ok!
убрать ID экипажа по умолчанию и ID заказа									ok!




- при расчёте "до окончания заказа":
	если "клиент не на борту", то накидывать 10 минут на ожидание клиента
    	с учётом времени подачи!
- вызов расчёта времени оптимизировать
- перерасчёт времени  "до окончания заказа" - при изменении координаты экипажа
- подбор экипажа для маршрута с использованием order.time_to_end
- выход из программы при отрубании инета




сброс координаты экипажа при новом расчёте!

ПЕРЕПИСАТЬ ПОДБОР ЭКИПАЖА ДЛЯ ЗАКАЗА!
пдбор экипажа для ЗАКАЗА!:
	- для АП опр-ем коорд-ту
	- список экипажей сортируем (фильтруем?) по состоянию рад. расст. до АП
    - проходим по списку экипажей, для кажного:
    	- если он:
        	- свободный и НЕ prior:
            	считаем маршрут коорд --> АП
            - свободный и приор:
            	считаем марш. коорд --> АП
                если успевает:
                	полный маршрут
                    коорд -- АП (время АП + 10 мин!!!) -- dest (+3)
                проверяем (?) на "успеваемость" на приор
            - занят и не приор:
            	считаем занятый заказ до конца,
                если просчитывается, то маршрут crew.order.dest -- AP
                суммируем времена
            - занят и приор:
            	считаем занятый заказ до конца,
                если просчитывается, то маршрут crew.order.dest -- AP
                если успевает (если раньше, то АП+10мин), то
                полное время заказа
                время dest -- АП_приор
                суммируем времена
                если успевает на приор, используем экипаж



обновление списка заказов каждые 3 секунды:
	//- отбираем по SOURCE_TIME, фильтруем по состоянию
    - отбираем по состоянию! фильтруем по source_time
    - которые через час и позже - в предварительные
    - для списка выгребаем данные - они могут меняться!
    - состояние - "своё" отделить от БД-шного - своё заносим в время до конца
    - удаляем заказы:  TOrderList.del_bad_orders()
    	- "удалённые" (поле );
        - отменённые (состояние "отменён")
        - и прочие "неправильные" по состоянию и прочим данным заказа

сделать 2 компонента транзакций и ibquery clew_list.ib_ta
	и order_list.ib_ta ??

отображение заказа на форме

если экипаж, приписанный к заказу, имеет состояние "недоступен", то что?
если экипаж уже назначен на заказ, то считать ли его для нового заказа или
	отбрасывать?  -- просчитать, упевает ли исполнить заказ и взять предписанный
    (плюс 20 минут на изменение пробок)

проверять свободные экипажи на приписанность к предварительному заказу
	и просчитывать, успеет ли экипаж выполнить текущий заказ и вовремя приехать
    на предварительный. на изменение "пробок"накидывать 20минут.

экипаж, взявший предварительный заказ (предварительный экипаж):  ORDERS.PRIOR_CREW_ID
	- м.б. только у предварительного заказа (ORDERS.IS_PRIOR = 1)
    в 99% он и становится ORDERS.CREWID

интерфейс а-ля "такси-мастер"!!!
	настройки колонок сохраняются в таблице USERS в полях:
    	NAME - имя пользователя
        LOGIN - тип пользвателя (OPERATOR, DISPATCHER и т.д.)
        STARTTIME, FINISHTIME - выход на/окончание смены
        SETTINGS - собственно настройки







при просчёте нового заказа сначала считать маршрут для prior_crewId, если он
	есть  !
просчитывать текущий заказ только если время подачи раньше текущего ??
маршрут для "занятых" экипажей !!
асинхронные запросы ??!!!;



сортировка и отброс координат экипажа по времени!							ok
написать расчёт времени до окончания заказа для заказа						ok
если экипаж на заказе клиента забрал и высадил, то заказ "завершён" !		ok
отображение заказов в 2 вкладки:											ok
	- текущие - которым меньше 1 часа до SOURCE_TIME
    - предварительные - больше
сделать нормальное обновление списка заказов, раз в 3 секунды 				ok

написать расчёт времени ЗАКАЗА												ok

ОБНОВЛЕНИЕ ДАННЫХ С БД!!!!!!!! - решено правильной настройкой трансакций 	ok
	object ta_main: TIBTransaction
    DefaultDatabase = db_main
    Params.Strings = (
      'read_committed'
      'rec_version'
      'nowait'
      'read')

- координатам, находящимся в одной "пачке" и относщиеся к одному эипажу		ok
	присваивать разные времена прибавлением дельты (см. robocap):
    		date1 := DataSource.DataSet.Fields[1].AsDateTime;
			date2 := DataSource.DataSet.Fields[2].AsDateTime;
			date0 := date2 - date1;
			l := DataSource.DataSet.Fields[3].DataSize;
			l2 := l div 12;
			date0 := date0 / l2;
            // ... skipped codes ...
            date1 := date1 + date0;

- если у заказа есть want_crew и prior_crew, то что ??						ok
	- want_crew не используется
- желаемый экипаж: ORDERS.WANTCREWID   - НЕ ИСПОЛЬЗУЕТСЯ!! 					ok
- радиус "попадания" сделать 150м 											ok
- исправлен вторичный просчёт gps-координаты адреса в маршруте заказа 		ok
- запрос времени и маршрута --> TCrew										ok
- написана ф-ия replace_time, позволяет брать время в плюс от текущего		ok
- отброс эвакуаторов - НЕ НАДО!												ok
- результирующий список фильтровать по времени подачи !;					ok
- разделить рабочий и результирующий список !;								ok
- запрос состояния экипажей - брать последнее !								ok
- РАСЧЁТ ВРЕМЕНИ МАРШРУТА ДО АП !;											ok
- СОРТИРОВКА СПИСКА ЭКИПАЖЕЙ ПО РАССТОЯНИЮ ДО АП И СОСТОЯНИЮ !;				ok
- ФУНКЦИЯ РАССТОЯНИЯ ЭКИПАЖА ДО АП !;										ok
- ФУНКЦИЯ - БЫЛА ЛИ МАШИНА В ЗАДАНОЙ ТОЧКЕ !;								ok
- ОТСОРТИРОВАТЬ КООРДИНАТЫ ПО ВРЕМЕНИ В CREW_LIST!							ok
- запрос даты сделать в формате YYYY-MM-DD !								ok

- replace dataset to ibquery;												OK
- добавить время к координатам экипажей, отсортировать по времени;			OK
- запрос работающих экипажей (1 и 3) ID, NAME, GPSID;						ok??
        	почему в таблице crews_coords есть экипажи, GpsId которых
            _отсутствует_ в таблице crews?
- функция, возращающая текущие (последние) кооринаты экипажа;
- запрос адресов заказов, выполнямых занятыми экипажами;					ok
- функция, прибавляющая время на остановки занятого экипажа по
		(не)посещённым адресам;
- функция, возвращающая GPS-координаты по адресу							ok
- функция, возвращающая время маршрута;
- функция расчёта расстояния (прямого) между 2 жпс-точками;					ok

------------------------------------------------------------------------------
не актуально уже:

общий алгоритм:

1. определить заказ ?!
2. получить gps-координаты для адреса подачи (АП);
3. найти рабочие экипажи, отсортировать их по расстоянию;
4. считать время проезда машин к АП, сортировать по времени, выводить на экран
	по мере просчёта;
	на экран выводить ID экипажа, код и время до АП;

необходимые функции:
- определение заказа (нового, текущего, как-то ещё)?
- выделение АП из заказа;
- определяем жпсК для АП;
- поиск рабочих экипажей:
	- список трек-точек за последние 30 минут (час, 10 минут?);
	- список экипажей трек-списка
	- список экипажей в состоянии "свободен" (1) и "занят" (3);
	- список текущих (свежайших) координат для рабочих экипажей;
	- расчёт расстояний рабочих экипажей до АП, список, сортировка;
	!на выходе имеем список рабочих экипажей, сортированных по расстоянию до АП;
- расчёт времени проезда экипажа до АП:
	- если свободен, то формируем маршрут "координата -- АП" и запрашиваем время;
	- если занят:
    	- определяем заказ, на котором экипаж занят;
        - составляем список точек остановок: начальной, промежуточных и конечной;
        - получаем жпс-координаты первой точки, смотрим трек - если был, то
        	переходим к следующей, если нет, формируем маршрут:
            	тек. коорд - точки останова - АП
                определяем время этого маршрута
                прибавляем по 10 минут на точки кроме высадки (3мин)
	- заносим в список экипаж, время подачи


